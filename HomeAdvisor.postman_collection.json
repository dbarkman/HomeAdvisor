{
	"info": {
		"_postman_id": "91bd2c50-9473-4921-b242-9a7d4efe5a60",
		"name": "HomeAdvisor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TestPass",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12aa56d1-162c-4b0c-841c-2611902a2e64",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"testPass\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"GET\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 0);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cla.ms/testPass",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"testPass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12aa56d1-162c-4b0c-841c-2611902a2e64",
						"exec": [
							"//general tests",
							"pm.test(\"Status 400 test\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Not OK test\", function () {",
							"    pm.response.to.not.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Error test\", function () {",
							"    pm.response.to.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 400);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"testPass\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"POST\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"badRequest\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", [\"Bad Request\"]);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"Bad Request\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"fail\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 0);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://cla.ms/testPass",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"testPass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resource Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12aa56d1-162c-4b0c-841c-2611902a2e64",
						"exec": [
							"//general tests",
							"pm.test(\"Status 404 test\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Not OK test\", function () {",
							"    pm.response.to.not.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Error test\", function () {",
							"    pm.response.to.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 404);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"thing\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"GET\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"resourceNotFound\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", [\"Resource Not Found\"]);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"Resource Not Found\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"fail\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 0);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cla.ms/thing",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"thing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Business - ID 10 - No Business",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c057e6d-d910-4848-b4f5-840e2a508754",
						"exec": [
							"var responseBusinessId1 = pm.collectionVariables.get(\"responseBusinessId1\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f481659c-f2e8-4153-bbbd-8eba4cf5e2ee",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"DELETE\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"businessNotDeleted\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", [\"No business found to delete.\"]);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"No business found to delete.\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 0);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?businessId=10",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "businessId",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Businesses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c057e6d-d910-4848-b4f5-840e2a508754",
						"exec": [
							"var responseBusinessId1 = pm.collectionVariables.get(\"responseBusinessId1\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f481659c-f2e8-4153-bbbd-8eba4cf5e2ee",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"DELETE\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\");",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?businessId=0",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "businessId",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NewBusiness - x2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b58256ed-a569-422f-a0f4-4bba013206c0",
						"exec": [
							"pm.collectionVariables.set(\"ratingScore1\", Math.floor((Math.random() * 5) + 1));",
							"pm.collectionVariables.set(\"ratingScore2\", Math.floor((Math.random() * 5) + 1));",
							"pm.collectionVariables.set(\"ratingScore3\", Math.floor((Math.random() * 5) + 1));",
							"pm.collectionVariables.set(\"ratingScore4\", Math.floor((Math.random() * 5) + 1));",
							"pm.collectionVariables.set(\"ratingScore5\", Math.floor((Math.random() * 5) + 1));",
							"pm.collectionVariables.set(\"ratingScore6\", Math.floor((Math.random() * 5) + 1));",
							"pm.collectionVariables.set(\"businessName\", \"{{$randomLastName}} Contracting {{$randomCompanySuffix}}\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3ec87740-4760-4d9b-83f0-96207d20b162",
						"exec": [
							"//grab data from the request and store in a collection variable",
							"var requestData = JSON.parse(pm.request.body);",
							"var requestBusinessName1 = requestData[0].businessName;",
							"var requestBusinessName2 = requestData[1].businessName;",
							"pm.collectionVariables.set(\"requestBusinessName1\", requestBusinessName1);",
							"pm.collectionVariables.set(\"requestBusinessName2\", requestBusinessName2);",
							"//grab data from the response and store in a collection variable",
							"var jsonData = JSON.parse(responseBody);",
							"var responseBusinessId1 = jsonData.data[0].id;",
							"var responseBusinessId2 = jsonData.data[1].id;",
							"pm.collectionVariables.set(\"responseBusinessId1\", responseBusinessId1);",
							"pm.collectionVariables.set(\"responseBusinessId2\", responseBusinessId2);",
							"var responseBusinessName1 = jsonData.data[0].businessName;",
							"var responseBusinessName2 = jsonData.data[1].businessName;",
							"pm.collectionVariables.set(\"responseBusinessName1\", responseBusinessName1);",
							"pm.collectionVariables.set(\"responseBusinessName2\", responseBusinessName2);",
							"// console.log(responseBusinessId1 + \" - \" + requestBusinessName1 + \" - \" + responseBusinessName1 + \" - \" + responseBusinessId2 + \" - \" + requestBusinessName2 + \" - \" + responseBusinessName2);",
							"",
							"//general tests",
							"pm.test(\"Status 201 test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 201);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"POST\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 2);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"});",
							"",
							"pm.test(\"Body matches expected data strings\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"    pm.expect(pm.response.text()).to.include(\"businessName\");",
							"    pm.expect(pm.response.text()).to.include(\"businessHours\");",
							"    pm.expect(pm.response.text()).to.include(\"businessAddress\");",
							"    pm.expect(pm.response.text()).to.include(\"operatingCities\");",
							"    pm.expect(pm.response.text()).to.include(\"workTypes\");",
							"    pm.expect(pm.response.text()).to.include(\"reviews\");",
							"});",
							"pm.test(\"Body matches expected data\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Sunday\");",
							"    pm.expect(pm.response.text()).to.include(\"CO\");",
							"    pm.expect(pm.response.text()).to.include(\"80206\");",
							"    pm.expect(pm.response.text()).to.include(\"Denver\");",
							"    pm.expect(pm.response.text()).to.include(\"Mesa\");",
							"    pm.expect(pm.response.text()).to.include(\"Packing\");",
							"    pm.expect(pm.response.text()).to.include(\"Wednesday\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"businessName\": \"{{businessName}}\",\n        \"businessHours\": [{\n            \"dayOfWeek\": \"Sunday\",\n            \"open\": 10,\n            \"close\": 2\n        }, {\n            \"dayOfWeek\": \"Monday\",\n            \"open\": 8,\n            \"close\": 5\n        }, {\n            \"dayOfWeek\": \"Tuesday\",\n            \"open\": 8,\n            \"close\": 5\n        }, {\n            \"dayOfWeek\": \"Wednesday\",\n            \"open\": 8,\n            \"close\": 4 \n        }, {\n            \"dayOfWeek\": \"Thursday\",\n            \"open\": 8,\n            \"close\": 6\n        }, {\n            \"dayOfWeek\": \"Friday\",\n            \"open\": 8,\n            \"close\": 4\n        }, {\n            \"dayOfWeek\": \"Saturday\",\n            \"open\": 9,\n            \"close\": 3\n        }],\n        \"businessAddress\": {\n            \"addressLine1\": \"{{$randomStreetAddress}}\",\n            \"addressLine2\": \"Suite {{$randomInt}}\",\n            \"city\": \"{{$randomCity}}\",\n            \"stateAbbr\": \"CO\",\n            \"postal\": \"80206\"\n        },\n        \"operatingCities\": [\"{{$randomCity}}\", \"{{$randomCity}}\", \"{{$randomCity}}\", \"{{$randomCity}}\", \"Denver\", \"Phoenix\", \"Mesa\"],\n        \"workTypes\": [\"{{$randomIngverb}}\", \"{{$randomIngverb}}\", \"{{$randomIngverb}}\", \"{{$randomIngverb}}\", \"Packing\"],\n        \"reviews\": [{\n            \"ratingScore\": {{ratingScore1}},\n            \"customerComment\": \"{{$randomPhrase}}\"\n        },{\n            \"ratingScore\": {{ratingScore2}},\n            \"customerComment\": \"{{$randomPhrase}}\"\n        },{\n            \"ratingScore\": {{ratingScore3}},\n            \"customerComment\": \"{{$randomPhrase}}\"\n        }]\n    },\n    {\n        \"businessName\": \"{{businessName}}\",\n        \"businessHours\": [{\n            \"dayOfWeek\": \"Sunday\",\n            \"open\": 10,\n            \"close\": 2\n        }, {\n            \"dayOfWeek\": \"Monday\",\n            \"open\": 8,\n            \"close\": 5\n        }, {\n            \"dayOfWeek\": \"Tuesday\",\n            \"open\": 8,\n            \"close\": 5\n        }, {\n            \"dayOfWeek\": \"Wednesday\",\n            \"open\": 8,\n            \"close\": 4 \n        }, {\n            \"dayOfWeek\": \"Thursday\",\n            \"open\": 8,\n            \"close\": 6\n        }, {\n            \"dayOfWeek\": \"Friday\",\n            \"open\": 8,\n            \"close\": 4\n        }, {\n            \"dayOfWeek\": \"Saturday\",\n            \"open\": 9,\n            \"close\": 3\n        }],\n        \"businessAddress\": {\n            \"addressLine1\": \"{{$randomStreetAddress}}\",\n            \"addressLine2\": \"Suite {{$randomInt}}\",\n            \"city\": \"{{$randomCity}}\",\n            \"stateAbbr\": \"CO\",\n            \"postal\": \"80206\"\n        },\n        \"operatingCities\": [\"{{$randomCity}}\", \"{{$randomCity}}\", \"{{$randomCity}}\", \"{{$randomCity}}\", \"Denver\", \"Phoenix\", \"Mesa\"],\n        \"workTypes\": [\"{{$randomIngverb}}\", \"{{$randomIngverb}}\", \"{{$randomIngverb}}\", \"{{$randomIngverb}}\", \"Packing\"],\n        \"reviews\": [{\n            \"ratingScore\": {{ratingScore4}},\n            \"customerComment\": \"{{$randomPhrase}}\"\n        },{\n            \"ratingScore\": {{ratingScore5}},\n            \"customerComment\": \"{{$randomPhrase}}\"\n        },{\n            \"ratingScore\": {{ratingScore6}},\n            \"customerComment\": \"{{$randomPhrase}}\"\n        }]\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://cla.ms/business",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					]
				}
			},
			"response": []
		},
		{
			"name": "Businesses - by businessName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27da5834-86cc-4953-982c-73d72d7ef30b",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"GET\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 2);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"});",
							"pm.test(\"Does not contain ID property\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    var firstDataObject = jsonData.data[0];",
							"    pm.expect(firstDataObject).to.not.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"Body matches expected data strings\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"businessName\");",
							"    pm.expect(pm.response.text()).to.include(\"businessHours\");",
							"    pm.expect(pm.response.text()).to.include(\"businessAddress\");",
							"    pm.expect(pm.response.text()).to.include(\"operatingCities\");",
							"    pm.expect(pm.response.text()).to.include(\"workTypes\");",
							"    pm.expect(pm.response.text()).to.include(\"reviews\");",
							"});",
							"pm.test(\"Body matches expected data\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Sunday\");",
							"    pm.expect(pm.response.text()).to.include(\"CO\");",
							"    pm.expect(pm.response.text()).to.include(\"80206\");",
							"    pm.expect(pm.response.text()).to.include(\"Denver\");",
							"    pm.expect(pm.response.text()).to.include(\"Mesa\");",
							"    pm.expect(pm.response.text()).to.include(\"Packing\");",
							"    pm.expect(pm.response.text()).to.include(\"Wednesday\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?order=businessName&direction=desc&operatingCity=Denver&workType=Packing&averageRatingScore=1&openOn=Monday&openAt=12&businessName=Contracting",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "order",
							"value": "businessName"
						},
						{
							"key": "direction",
							"value": "desc"
						},
						{
							"key": "businessId",
							"value": "33",
							"disabled": true
						},
						{
							"key": "operatingCity",
							"value": "Denver"
						},
						{
							"key": "workType",
							"value": "Packing"
						},
						{
							"key": "averageRatingScore",
							"value": "1"
						},
						{
							"key": "openOn",
							"value": "Monday"
						},
						{
							"key": "openAt",
							"value": "12"
						},
						{
							"key": "businessName",
							"value": "Contracting"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Businesses - by averageRatingScore",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07e5641b-a760-4c11-97ed-d547c432970e",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"GET\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 2);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"});",
							"pm.test(\"Does not contain ID property\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    var firstDataObject = jsonData.data[0];",
							"    pm.expect(firstDataObject).to.not.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"Body matches expected data strings\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"businessName\");",
							"    pm.expect(pm.response.text()).to.include(\"businessHours\");",
							"    pm.expect(pm.response.text()).to.include(\"businessAddress\");",
							"    pm.expect(pm.response.text()).to.include(\"operatingCities\");",
							"    pm.expect(pm.response.text()).to.include(\"workTypes\");",
							"    pm.expect(pm.response.text()).to.include(\"reviews\");",
							"});",
							"pm.test(\"Body matches expected data\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Sunday\");",
							"    pm.expect(pm.response.text()).to.include(\"CO\");",
							"    pm.expect(pm.response.text()).to.include(\"80206\");",
							"    pm.expect(pm.response.text()).to.include(\"Denver\");",
							"    pm.expect(pm.response.text()).to.include(\"Mesa\");",
							"    pm.expect(pm.response.text()).to.include(\"Packing\");",
							"    pm.expect(pm.response.text()).to.include(\"Wednesday\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?order=averageRatingScore&businessName=Contracting&operatingCity=Denver&workType=Packing&averageRatingScore=1&openOn=Monday&openAt=12",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "order",
							"value": "averageRatingScore"
						},
						{
							"key": "direction",
							"value": "desc",
							"disabled": true
						},
						{
							"key": "businessId",
							"value": "22",
							"disabled": true
						},
						{
							"key": "businessName",
							"value": "Contracting"
						},
						{
							"key": "operatingCity",
							"value": "Denver"
						},
						{
							"key": "workType",
							"value": "Packing"
						},
						{
							"key": "averageRatingScore",
							"value": "1"
						},
						{
							"key": "openOn",
							"value": "Monday"
						},
						{
							"key": "openAt",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Businesses - by Business ID $1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "82f6dd33-c028-4053-9a36-9a9f7206f764",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"GET\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 1);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"});",
							"pm.test(\"Contains ID property\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    var firstDataObject = jsonData.data[0];",
							"    pm.expect(firstDataObject).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"Body matches expected data strings\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"businessName\");",
							"    pm.expect(pm.response.text()).to.include(\"businessHours\");",
							"    pm.expect(pm.response.text()).to.include(\"businessAddress\");",
							"    pm.expect(pm.response.text()).to.include(\"operatingCities\");",
							"    pm.expect(pm.response.text()).to.include(\"workTypes\");",
							"    pm.expect(pm.response.text()).to.include(\"reviews\");",
							"});",
							"pm.test(\"Body matches expected data\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Sunday\");",
							"    pm.expect(pm.response.text()).to.include(\"CO\");",
							"    pm.expect(pm.response.text()).to.include(\"80206\");",
							"    pm.expect(pm.response.text()).to.include(\"Denver\");",
							"    pm.expect(pm.response.text()).to.include(\"Mesa\");",
							"    pm.expect(pm.response.text()).to.include(\"Packing\");",
							"    pm.expect(pm.response.text()).to.include(\"Wednesday\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?businessId={{responseBusinessId1}}",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "businessId",
							"value": "{{responseBusinessId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Business - ID $1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c057e6d-d910-4848-b4f5-840e2a508754",
						"exec": [
							"var responseBusinessId1 = pm.collectionVariables.get(\"responseBusinessId1\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f481659c-f2e8-4153-bbbd-8eba4cf5e2ee",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"DELETE\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 1);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?businessId={{responseBusinessId1}}",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "businessId",
							"value": "{{responseBusinessId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Business - ID $2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c057e6d-d910-4848-b4f5-840e2a508754",
						"exec": [
							"var responseBusinessId1 = pm.collectionVariables.get(\"responseBusinessId1\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f481659c-f2e8-4153-bbbd-8eba4cf5e2ee",
						"exec": [
							"//general tests",
							"pm.test(\"Status 200 test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"OK test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"With Body test\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"JSON Body test\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Not Error test\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"//make sure the response contains the exact format always returned",
							"pm.test(\"Contains httpStatus Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"httpStatus\", 200);",
							"});",
							"pm.test(\"Contains noun Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"noun\", \"business\");",
							"});",
							"pm.test(\"Contains verb Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"verb\", \"DELETE\");",
							"});",
							"pm.test(\"Contains errorCode Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errorCode\", \"none\");",
							"});",
							"pm.test(\"Contains errors Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"errors\", []);",
							"});",
							"pm.test(\"Contains friendlyError Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"friendlyError\", \"\");",
							"});",
							"pm.test(\"Contains result Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"result\", \"success\");",
							"});",
							"pm.test(\"Contains count Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"count\", 1);",
							"});",
							"pm.test(\"Contains data Body test\", function () {",
							"    pm.response.to.have.jsonBody(\"data\", []);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://cla.ms/business?businessId={{responseBusinessId2}}",
					"protocol": "https",
					"host": [
						"cla",
						"ms"
					],
					"path": [
						"business"
					],
					"query": [
						{
							"key": "businessId",
							"value": "{{responseBusinessId2}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "cd7529b9-7f41-4553-9b9f-067736f21b02",
			"key": "ratingScore1",
			"value": ""
		},
		{
			"id": "c0b6b7c1-85e0-4a96-add6-7405f0eaa774",
			"key": "ratingScore2",
			"value": ""
		},
		{
			"id": "a4a975e8-2761-44be-9624-3a7bdf7bf2cc",
			"key": "ratingScore3",
			"value": ""
		},
		{
			"id": "aabcef48-5fcd-493c-b2cd-b6004a4fa6e7",
			"key": "businessName1",
			"value": ""
		},
		{
			"id": "7864eea8-b318-427f-8efe-7ec54fc15738",
			"key": "businessName2",
			"value": ""
		},
		{
			"id": "4d01dc1c-8a31-4a5f-8134-45d717ae5217",
			"key": "ratingScore4",
			"value": ""
		},
		{
			"id": "a2d54d5e-8e7f-436a-b442-f53575ba616d",
			"key": "ratingScore5",
			"value": ""
		},
		{
			"id": "2e739e8c-6182-4966-b487-3125b1ef5a6a",
			"key": "ratingScore6",
			"value": ""
		},
		{
			"id": "18690f7a-a325-45e6-94ce-5455e1f465aa",
			"key": "name",
			"value": ""
		},
		{
			"id": "2e02c5ae-469e-4117-93bf-8fe70e45af15",
			"key": "businessId1",
			"value": ""
		},
		{
			"id": "6d701634-3fac-4613-b431-5eb520634c56",
			"key": "businessId2",
			"value": ""
		},
		{
			"id": "001ec665-c984-4bd0-aa12-a1efd97fffe3",
			"key": "businessName",
			"value": ""
		},
		{
			"id": "fbb8ef02-2c04-4a22-b1c9-da6074a0f2d3",
			"key": "requestBusinessName1",
			"value": ""
		},
		{
			"id": "b71b4f50-0dc8-4f4e-a47c-11b82d1cfd33",
			"key": "requestBusinessName2",
			"value": ""
		},
		{
			"id": "30240e57-e89d-4188-9c00-5d6ba59a47fb",
			"key": "responseBusinessId1",
			"value": ""
		},
		{
			"id": "02ee07c8-e7eb-4d12-9a8c-df997a578a62",
			"key": "responseBusinessId2",
			"value": ""
		},
		{
			"id": "c7a5a685-93da-4f1e-8c8b-583eb1f9b931",
			"key": "responseBusinessName1",
			"value": ""
		},
		{
			"id": "fa5bd19f-240f-406a-93e4-8551af07606f",
			"key": "responseBusinessName2",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}